import { VersionId } from '../service_types/versionid';
import { PropsBase } from './PropsBase';
import { IPropsTaxing } from '../service_interfaces/IPropsTaxing';
import bigDecimal = require('js-big-decimal');
import { WorkTaxingTerms } from '../service_types/ContractTerms';
export declare abstract class PropsTaxingBase extends PropsBase implements IPropsTaxing {
    protected static BIG_100: bigDecimal;
    protected static BIG_ZERO: bigDecimal;
    constructor(version: VersionId, allowancePayer: number, allowanceDisab1st: number, allowanceDisab2nd: number, allowanceDisab3rd: number, allowanceStudy: number, allowanceChild1st: number, allowanceChild2nd: number, allowanceChild3rd: number, factorAdvances: bigDecimal, factorWithhold: bigDecimal, factorSolidary: bigDecimal, factorTaxRate2: bigDecimal, minAmountOfTaxBonus: number, maxAmountOfTaxBonus: number, marginIncomeOfTaxBonus: number, marginIncomeOfRounding: number, marginIncomeOfWithhold: number, marginIncomeOfSolidary: number, marginIncomeOfTaxRate2: number, marginIncomeOfWthEmp: number, marginIncomeOfWthAgr: number);
    allowancePayer: number;
    allowanceDisab1st: number;
    allowanceDisab2nd: number;
    allowanceDisab3rd: number;
    allowanceStudy: number;
    allowanceChild1st: number;
    allowanceChild2nd: number;
    allowanceChild3rd: number;
    factorAdvances: bigDecimal;
    factorWithhold: bigDecimal;
    factorSolidary: bigDecimal;
    factorTaxRate2: bigDecimal;
    minAmountOfTaxBonus: number;
    maxAmountOfTaxBonus: number;
    marginIncomeOfTaxBonus: number;
    marginIncomeOfRounding: number;
    marginIncomeOfWithhold: number;
    marginIncomeOfSolidary: number;
    marginIncomeOfTaxRate2: number;
    marginIncomeOfWthEmp: number;
    marginIncomeOfWthAgr: number;
    AllowancePayer(): number;
    AllowanceDisab1st(): number;
    AllowanceDisab2nd(): number;
    AllowanceDisab3rd(): number;
    AllowanceStudy(): number;
    AllowanceChild1st(): number;
    AllowanceChild2nd(): number;
    AllowanceChild3rd(): number;
    FactorAdvances(): bigDecimal;
    FactorWithhold(): bigDecimal;
    FactorSolidary(): bigDecimal;
    FactorTaxRate2(): bigDecimal;
    MinAmountOfTaxBonus(): number;
    MaxAmountOfTaxBonus(): number;
    MarginIncomeOfTaxBonus(): number;
    MarginIncomeOfRounding(): number;
    MarginIncomeOfWithhold(): number;
    MarginIncomeOfSolidary(): number;
    MarginIncomeOfTaxRate2(): number;
    MarginIncomeOfWthEmp(): number;
    MarginIncomeOfWthAgr(): number;
    valueEquals(other: IPropsTaxing): boolean;
    intTaxRoundUp(valueDec: bigDecimal): number;
    intTaxRoundNearUp(valueDec: bigDecimal, nearest?: number): number;
    intTaxRoundDown(valueDec: bigDecimal): number;
    intTaxRoundNearDown(valueDec: bigDecimal, nearest?: number): number;
    decTaxRoundUp(valueDec: bigDecimal): bigDecimal;
    decTaxRoundNearUp(valueDec: bigDecimal, nearest?: number): bigDecimal;
    decTaxRoundDown(valueDec: bigDecimal): bigDecimal;
    decTaxRoundNearDown(valueDec: bigDecimal, nearest?: number): bigDecimal;
    abstract hasWithholdIncome(termOpt: WorkTaxingTerms, signOpt: TaxDeclSignOption, noneOpt: TaxNoneSignOption, incomeSum: number): boolean;
    benefitAllowancePayer(signOpts: TaxDeclSignOption, benefitOpts: TaxDeclBenfOption): number;
    benefitAllowanceDisab(signOpts: TaxDeclSignOption, benefitOpts: TaxDeclDisabOption): number;
    benefitAllowanceStudy(signOpts: TaxDeclSignOption, benefitOpts: TaxDeclBenfOption): number;
    benefitAllowanceChild(signOpts: TaxDeclSignOption, benefitOpts: TaxDeclBenfOption, benefitOrds: number, disabelOpts: number): number;
    bonusChildRaw(income: number, benefit: number, rebated: number): number;
    bonusChildFix(income: number, benefit: number, rebated: number): number;
    taxableIncomeSupers(incomeResult: number, healthResult: number, socialResult: number): number;
    taxableIncomeBasis(incomeResult: number): number;
    roundedBaseAdvances(incomeResult: number, healthResult: number, socialResult: number): number;
    roundedRawBaseAdvances(incomeResult: number): number;
    roundedBaseSolidary(incomeResult: number): number;
    abstract roundedAdvancesPaym(supersResult: number, basisResult: number): number;
    roundedSolidaryPaym(basisResult: number): number;
    roundedBaseWithhold(incomeResult: number): number;
    roundedWithholdPaym(supersResult: number, basisResult: number): number;
}
