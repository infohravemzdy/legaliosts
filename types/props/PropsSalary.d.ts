import { VersionId } from '../service_types/versionid';
import { PropsBase } from './PropsBase';
import { IPropsSalary } from '../service_interfaces/IPropsSalary';
import bigDecimal = require('js-big-decimal');
export declare class PropsSalary extends PropsBase implements IPropsSalary {
    protected static BIG_ZERO: bigDecimal;
    constructor(version: VersionId, workingShiftWeek: number, workingShiftTime: number, minMonthlyWage: number, minHourlyWage: number);
    workingShiftWeek: number;
    workingShiftTime: number;
    minMonthlyWage: number;
    minHourlyWage: number;
    WorkingShiftWeek(): number;
    WorkingShiftTime(): number;
    MinMonthlyWage(): number;
    MinHourlyWage(): number;
    static empty(): IPropsSalary;
    valueEquals(other: IPropsSalary): boolean;
    private totalHoursWithFullAndPartHours;
    private decPaymentWithMonthlyAndCoeffAndFullAndWorkHours;
    private decPaymentWithMonthlyAndFullAndWorkHours;
    private decPaymentWithTariffAndHours;
    private decTariffWithPaymentAndHours;
    private decPaymentWithAmountFixed;
    coeffWithPartAndFullHours(fullWorkHours: bigDecimal, partWorkHours: bigDecimal): bigDecimal;
    relativeAmountWithMonthlyAndCoeffAndWorkCoeff(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, workingCoeff: bigDecimal): bigDecimal;
    reverzedAmountWithMonthlyAndCoeffAndWorkCoeff(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, workingCoeff: bigDecimal): bigDecimal;
    relativeTariffWithMonthlyAndCoeffAndWorkCoeff(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, workingCoeff: bigDecimal): bigDecimal;
    reverzedTariffWithMonthlyAndCoeffAndWorkCoeff(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, workingCoeff: bigDecimal): bigDecimal;
    relativePaymentWithMonthlyAndCoeffAndWorkCoeff(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, workingCoeff: bigDecimal): bigDecimal;
    reverzedPaymentWithMonthlyAndCoeffAndWorkCoeff(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, workingCoeff: bigDecimal): bigDecimal;
    paymentWithAmountFixed(amountFixed: bigDecimal): bigDecimal;
    paymentRoundUpWithAmountFixed(amountFixed: bigDecimal): bigDecimal;
    paymentWithTariffAndHours(tariffHourly: bigDecimal, workingsHours: bigDecimal): bigDecimal;
    paymentRoundUpWithTariffAndHours(tariffHourly: bigDecimal, workingsHours: bigDecimal): bigDecimal;
    tariffWithPaymentAndHours(amountHourly: bigDecimal, workingsHours: bigDecimal): bigDecimal;
    paymentWithMonthlyAndCoeffAndFullAndWorkHours(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, fullWorkHours: number, partWorkHours: number): bigDecimal;
    paymentRoundUpWithMonthlyAndCoeffAndFullAndWorkHours(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, fullWorkHours: number, partWorkHours: number): bigDecimal;
    paymentWithMonthlyAndCoeffAndWorkCoeff(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, workingCoeff: bigDecimal): bigDecimal;
    paymentRoundUpWithMonthlyAndCoeffAndWorkCoeff(amountMonthly: bigDecimal, monthlyCoeff: bigDecimal, workingCoeff: bigDecimal): bigDecimal;
    paymentWithMonthlyAndFullWeekAndFullAndWorkHours(amountMonthly: bigDecimal, fullWeekHours: number, partWeekHours: number, fullWorkHours: number, partWorkHours: number): bigDecimal;
    paymentRoundUpWithMonthlyAndFullWeekAndFullAndWorkHours(amountMonthly: bigDecimal, fullWeekHours: number, partWeekHours: number, fullWorkHours: number, partWorkHours: number): bigDecimal;
    hoursToHalfHoursUp(hoursValue: bigDecimal): bigDecimal;
    hoursToQuartHoursUp(hoursValue: bigDecimal): bigDecimal;
    hoursToHalfHoursDown(hoursValue: bigDecimal): bigDecimal;
    hoursToQuartHoursDown(hoursValue: bigDecimal): bigDecimal;
    hoursToHalfHoursNorm(hoursValue: bigDecimal): bigDecimal;
    hoursToQuartHoursNorm(hoursValue: bigDecimal): bigDecimal;
    moneyToRoundDown(moneyValue: bigDecimal): bigDecimal;
    moneyToRoundUp(moneyValue: bigDecimal): bigDecimal;
    moneyToRoundNorm(moneyValue: bigDecimal): bigDecimal;
    factorizeValue(baseValue: bigDecimal, factor: bigDecimal): bigDecimal;
    reverzedFactorizeValue(baseValue: bigDecimal, factor: bigDecimal): bigDecimal;
}
