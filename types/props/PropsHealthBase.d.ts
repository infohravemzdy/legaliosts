import bigDecimal = require('js-big-decimal');
import { VersionId } from '../service_types/versionid';
import { PropsBase } from './PropsBase';
import { IPropsHealth } from '../service_interfaces/IPropsHealth';
import { WorkHealthTerms } from '../service_types/ContractTerms';
import { ParticyHealthResult, ParticyHealthTarget } from './ParticyResults';
export declare abstract class PropsHealthBase extends PropsBase implements IPropsHealth {
    private static BIG_100;
    constructor(version: VersionId, minMonthlyBasis: number, maxAnnualsBasis: number, limMonthlyState: number, limMonthlyDis50: number, factorCompound: bigDecimal, factorEmployee: bigDecimal, marginIncomeEmp: number, marginIncomeAgr: number);
    minMonthlyBasis: number;
    maxAnnualsBasis: number;
    limMonthlyState: number;
    limMonthlyDis50: number;
    factorCompound: bigDecimal;
    factorEmployee: bigDecimal;
    marginIncomeEmp: number;
    marginIncomeAgr: number;
    MinMonthlyBasis(): number;
    MaxAnnualsBasis(): number;
    LimMonthlyState(): number;
    LimMonthlyDis50(): number;
    FactorCompound(): bigDecimal;
    FactorEmployee(): bigDecimal;
    MarginIncomeEmp(): number;
    MarginIncomeAgr(): number;
    valueEquals(other: IPropsHealth): boolean;
    hasParticy(term: WorkHealthTerms, incomeTerm: number, incomeSpec: number): boolean;
    protected abstract hasTermExemptionParticy(term: WorkHealthTerms): boolean;
    protected abstract hasIncomeBasedEmploymentParticy(term: WorkHealthTerms): boolean;
    protected abstract hasIncomeBasedAgreementsParticy(term: WorkHealthTerms): boolean;
    protected abstract hasIncomeCumulatedParticy(term: WorkHealthTerms): boolean;
    private decInsuranceRoundUp;
    private intInsuranceRoundUp;
    roundedCompoundPaym(basisResult: number): number;
    roundedEmployeePaym(basisResult: number): number;
    roundedAugmentEmployeePaym(basisGenerals: number, basisAugment: number): number;
    roundedAugmentEmployerPaym(basisGenerals: number, baseEmployee: number, baseEmployer: number): number;
    roundedEmployerPaym(basisResult: number): number;
    annualsBasisCut(incomeList: Iterable<ParticyHealthTarget>, annuityBasis: number): [number, number, Iterable<ParticyHealthResult>];
}
